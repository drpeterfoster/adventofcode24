# %%
import re
import numpy as np
import pandas as pd
from aocd.models import Puzzle


# %%
puz = Puzzle(year=2024, day=21)
puz.view()


# %%
def parse_data(data: str):
    return data.strip().split("\n")


NUMBER_PATHS = {
    ("1", "2"): ">",
    ("1", "3"): ">>",
    ("1", "4"): "^",
    ("1", "5"): "^>",
    ("1", "6"): "^>>",
    ("1", "7"): "^^",
    ("1", "8"): "^^>",
    ("1", "9"): ">>^^",
    ("1", "0"): ">v",
    ("1", "A"): ">>v",
    ("2", "1"): "<",
    ("2", "3"): ">",
    ("2", "4"): "^<",
    ("2", "5"): "^",
    ("2", "6"): "^>",
    ("2", "7"): "^^<",
    ("2", "8"): "^^",
    ("2", "9"): "^^>",
    ("2", "0"): "v",
    ("2", "A"): "v>",
    ("3", "1"): "<<",
    ("3", "2"): "<",
    ("3", "4"): "^<<",
    ("3", "5"): "^<",
    ("3", "6"): "^",
    ("3", "7"): "<<^^",
    ("3", "8"): "^^<",
    ("3", "9"): "^^",
    ("3", "0"): "v<",
    ("3", "A"): "v",
    ("4", "1"): "v",
    ("4", "2"): "v>",
    ("4", "3"): "v>>",
    ("4", "5"): ">",
    ("4", "6"): ">>",
    ("4", "7"): "^",
    ("4", "8"): "^>",
    ("4", "9"): "^>>",
    ("4", "0"): ">vv",
    ("4", "A"): ">>vv",
    ("5", "1"): "v<",
    ("5", "2"): "v",
    ("5", "3"): "v>",
    ("5", "4"): "<",
    ("5", "6"): ">",
    ("5", "7"): "^<",
    ("5", "8"): "^",
    ("5", "9"): "^>",
    ("5", "0"): "vv",
    ("5", "A"): "vv>",
    ("6", "1"): "v<<",
    ("6", "2"): "v<",
    ("6", "3"): "v",
    ("6", "4"): "<<",
    ("6", "5"): "<",
    ("6", "7"): "^<<",
    ("6", "8"): "^<",
    ("6", "9"): "^",
    ("6", "0"): "vv<",
    ("6", "A"): "vv",
    ("7", "1"): "vv",
    ("7", "2"): "vv>",
    ("7", "3"): "vv>>",
    ("7", "4"): "v",
    ("7", "5"): "v>",
    ("7", "6"): "v>>",
    ("7", "8"): ">",
    ("7", "9"): ">>",
    ("7", "0"): ">vvv",
    ("7", "A"): ">>vvv",
    ("8", "1"): "vv<",
    ("8", "2"): "vv",
    ("8", "3"): "vv>",
    ("8", "4"): "v<",
    ("8", "5"): "v",
    ("8", "6"): "v>",
    ("8", "7"): "<",
    ("8", "9"): ">",
    ("8", "0"): "vvv",
    ("8", "A"): "vvv>",
    ("9", "1"): "vv<<",
    ("9", "2"): "vv<",
    ("9", "3"): "vv",
    ("9", "4"): "v<<",
    ("9", "5"): "v<",
    ("9", "6"): "v",
    ("9", "7"): "<<",
    ("9", "8"): "<",
    ("9", "0"): "vvv<",
    ("9", "A"): "vvv",
    ("0", "1"): "^<",
    ("0", "2"): "^",
    ("0", "3"): "^>",
    ("0", "4"): "^^<",
    ("0", "5"): "^^",
    ("0", "6"): "^^>",
    ("0", "7"): "^^^<",
    ("0", "8"): "^^^",
    ("0", "9"): "^^^>",
    ("0", "A"): ">",
    ("A", "1"): "^<<",
    ("A", "2"): "^<",
    ("A", "3"): "^",
    ("A", "4"): "^^<<",
    ("A", "5"): "^^<",
    ("A", "6"): "^^",
    ("A", "7"): "^^^<<",
    ("A", "8"): "^^^<",
    ("A", "9"): "^^^",
    ("A", "0"): "<",
}

ARROW_PATHS = {
    ("^", "v"): "v",
    ("^", "A"): ">",
    ("^", "<"): "v<",
    ("^", ">"): "v>",
    ("v", "^"): "^",
    ("v", "A"): ">^",
    ("v", "<"): "<",
    ("v", ">"): ">",
    ("A", "^"): "<",
    ("A", "v"): "<v",
    ("A", "<"): "v<<",
    ("A", ">"): "v",
    ("<", "^"): ">^",
    ("<", "v"): ">",
    ("<", "A"): ">>^",
    ("<", ">"): ">>",
    (">", "^"): "^<",
    (">", "v"): "<",
    (">", "A"): "^",
    (">", "<"): "<<",
}


def part1(data=None):
    codes = parse_data(data)
    result = 0
    for code in codes:
        inst1 = make_code(code, NUMBER_PATHS)
        inst2 = make_code(inst1, ARROW_PATHS)
        inst3 = make_code(inst2, ARROW_PATHS)
        score = int(code[:-1]) * len(inst3)
        # print("<v<A>>^AvA^A<vA<AA>>^AAvA<^A>AAvA^A<vA>^AA<A>A<v<A>A>^AAAvA<^A>A")
        # print(inst3)
        # print()
        # print("<A>Av<<AA>^AA>AvAA^A<vAAA>^A")
        # print(inst2)
        # print()
        # print("^A<<^^A>>AvvvA")
        # print(inst1)
        # print(code)
        # print(len(inst3), int(code[:-1]))
        result += score
    return result


def make_code(code, keypad):
    code = "A" + code
    inst = ""
    for i in range(len(code) - 1):
        inst += keypad.get((code[i], code[i + 1]), "") + "A"
    return inst


# %%
print(" found:", part1("029A\n980A\n179A\n456A\n379A\n"))
print("answer:", puz.examples[0].answer_a)
resa = part1(puz.input_data)
print(f"solution: {resa}")
# puz.answer_a = resa


# %%
def part2(data=None):
    input = parse_data(data)
    result = 0
    return result


# %%
print("found:", part2(puz.examples[0].input_data))
print("answer:", puz.examples[0].answer_b)
# resb = part2(puz.input_data)
# print(f"solution: {resb}")
# puz.answer_b = resb

# %%
